from aiogram import types
from aiogram.utils.markdown import hide_link
from uuid import uuid4
from datetime import datetime
import emoji

from bot import dp
from db_utils.models import *
from keyboards import inline_menu, create_inline_keyboard_dessert, create_types_keyboard
from main import get_categories
from .function import *
from config import PATH_TO_IMAGE


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç!{emoji.emojize(':waving_hand:')} –¶–µ –∫–∞—Ñ–µ-–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫–∞ Sweeeet dream!{emoji.emojize(':cupcake:')}\n"
                        f"–û—á—ñ–∫—É—î–º–æ –Ω–∞ —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –æ–±–∏—Ä–∞–π —Ç—ñ—Å—Ç–µ—á–∫–∞ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è!{emoji.emojize(':smiling_face_with_hearts:')}",
                        reply_markup = inline_menu)
    users_id_lst = [elem.user_id for elem in session.query(User).all()]
    if message.from_user.id not in users_id_lst:
        new_user = User(user_id=message.from_user.id)
        session.add(new_user)
        session.commit()
        print("add new user")
    unique_id = str(uuid4())
    order = Order(order_id=unique_id, user_id=message.from_user.id,
                  date_time=datetime.datetime.now(),
                  state='checkout')
    session.add(order)
    session.commit()



@dp.message_handler(commands=['about'])
async def send_about(message: types.Message):
    await message.reply(f"–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, —Ç–∏ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ–π  {emoji.emojize(':butterfly:')}"
                        "–ü–∞—Ä—É –∫–Ω–æ–ø–æ—á–æ–∫ —ñ –º–æ–∂–µ—à –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—å —É–ª—é–±–ª–µ–Ω–∏–º–∏ —Ç—ñ—Å—Ç–µ—á–∫–∞–º–∏ –Ω–µ –≤–∏—Ö–æ–¥—è—á–∏ –∑ –¥–æ–º—É!"
                        f"{emoji.emojize(':cupcake:')}{emoji.emojize(':shortcake:')}{emoji.emojize(':doughnut:')}")

@dp.message_handler(commands=['menu'])
async def send_about(message: types.Message):
    await message.reply(f"–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {emoji.emojize(':right_arrow_curving_down:')}",  reply_markup=create_types_keyboard())


@dp.message_handler(lambda message: message.text in get_categories())
async def get_desserts(message: types.Message):
    category_id = session.query(Category).filter(Category.category_name == message.text).first()
    result = session.query(Dessert).filter(Dessert.category_id == category_id.category_id).all()
    for elem in result:

        with open(f"{PATH_TO_IMAGE}{elem.image}", 'rb') as img:
            await message.answer_photo(img, elem,
                                       reply_markup=create_inline_keyboard_dessert(elem.dessert_id))



            # await message.answer(text=f'{elem}{elem.image_url}',  parse_mode='HTML',
            #                      reply_markup = create_inline_keyboard_dessert(elem.dessert_id))

@dp.message_handler()
async def send_about(message: types.Message):
    await message.reply(f"–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—å–æ–≥–æ {emoji.emojize('üòî')} \n–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —î –∫–æ–º–∞–Ω–¥–∞ - /menu")